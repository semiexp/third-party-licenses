import argparse
import json
import os
import subprocess
import warnings
from typing import NamedTuple


class Dependency(NamedTuple):
    name: str
    license_doc: str


def find_license_file(directory: str) -> str | None:
    files = os.listdir(directory)
    for file in files:
        if file.lower().startswith("license"):
            full_path = os.path.join(directory, file)
            if os.path.isfile(full_path):
                return full_path

    return None


def has_rust_project(directory: str) -> bool:
    """Check if the directory contains a Rust project."""
    return os.path.exists(os.path.join(directory, "Cargo.toml"))


def get_rust_dependencies(directory: str) -> list[Dependency]:
    prj_data_json = subprocess.check_output(
        ["cargo", "metadata", "--format-version", "1", "--no-deps"], cwd=directory
    ).decode("utf-8")
    prj_data = json.loads(prj_data_json)
    prj_packages = [pkg["name"] for pkg in prj_data["packages"]]

    dep_data_json = subprocess.check_output(
        ["cargo", "metadata", "--format-version", "1"], cwd=directory
    ).decode("utf-8")
    dep_data = json.loads(dep_data_json)

    ret = []
    for pkg in dep_data["packages"]:
        name = pkg["name"]
        if name in prj_packages:
            continue
        manifest_path = pkg["manifest_path"]
        license_file = find_license_file(os.path.dirname(manifest_path))

        if license_file is None:
            warnings.warn(f"License file not found for {name} in {directory}")
            continue

        with open(license_file, "r") as f:
            license_doc = f.read()

        ret.append(Dependency(name=name, license_doc=license_doc))
    return ret


def has_js_project(directory: str) -> bool:
    """Check if the directory contains a JavaScript project."""
    return os.path.exists(os.path.join(directory, "package.json"))


def get_js_dependencies(directory: str) -> list[Dependency]:
    dep_path = subprocess.check_output(
        ["npm", "ls", "--parseable", "--all", "--omit", "dev"], cwd=directory
    ).decode("utf-8").strip().split("\n")

    ret = []
    for dep in dep_path:
        if os.path.realpath(dep) == os.path.realpath(directory):
            continue

        with open(os.path.join(dep, "package.json"), "r") as f:
            package_json = json.load(f)
            name = package_json["name"]

        license_file = find_license_file(dep)
        if license_file is None:
            # TODO: fallback to git repository
            if "license" not in package_json:
                warnings.warn(f"License not found for {name} in {dep}")
            else:
                license_kind = package_json["license"]
                warnings.warn(f"License file not found for {name} in {dep} (license type: {license_kind})")
                license_doc = f"Licensed under {license_kind}"
            continue

        with open(license_file, "r") as f:
            license_doc = f.read()

        ret.append(Dependency(name=name, license_doc=license_doc))
    return ret


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("dirs", type=str, nargs="+")
    parser.add_argument("--output", "-o", type=str, default=None)
    args = parser.parse_args()

    licenses = []

    for directory_base in args.dirs:
        if "@" in directory_base:
            project_name, directory = directory_base.split("@")
        else:
            directory = directory_base
            project_name = os.path.basename(directory_base.removesuffix("/"))

        project_license_file = find_license_file(directory)
        if project_license_file is not None:
            with open(project_license_file, "r") as f:
                project_license = f.read()
            licenses.append(Dependency(name=project_name, license_doc=project_license))
        else:
            warnings.warn(f"License file not found in {directory}")

        has_rust = has_rust_project(directory)
        has_js = has_js_project(directory)

        if not has_rust and not has_js:
            warnings.warn(f"Directory {directory} does not contain a Rust or JavaScript project.")

        if has_rust:
            licenses += get_rust_dependencies(directory)

        if has_js:
            licenses += get_js_dependencies(directory)

    content = []
    content.append("License info generated by https://github.com/semiexp/third-party-licenses\n\n")

    template = "=" * 40 + " {name} " + "=" * 40 + "\n\n"
    for license in licenses:
        content.append(template.format(name=license.name))
        content.append(license.license_doc)
        content.append("\n\n")

    if args.output is None:
        print("".join(content))
    else:
        with open(args.output, "w") as f:
            f.write("".join(content))


if __name__ == "__main__":
    main()
